name: Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build-test-sonar:
    runs-on: ubuntu-latest
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ⚙️ Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: 📦 Install SonarScanner for .NET
        run: dotnet tool install --global dotnet-sonarscanner

      - name: 📦 Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: 📦 Install dependencies
        run: dotnet restore

      - name: 🕵️‍♂️ Begin SonarCloud analysis 
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet-sonarscanner begin \
            /k:"${{ secrets.SONAR_PROJECT_KEY }}" \
            /o:"${{ secrets.SONAR_ORGANIZATION }}" \
            /d:sonar.cs.vscoveragexml.reportsPaths="coverage-report/coverage.cobertura.xml" \
            /d:sonar.coverage.exclusions="**Tests*.cs" \
            /d:sonar.verbose=true

      - name: 🛠 Build
        run: dotnet build --no-restore --configuration Release

      - name: ✅ Run Tests with Coverage
        run: |
          echo "🧪 Iniciando execução de testes com cobertura..."
          mkdir -p TestResults
          
          dotnet test \
            --configuration Release \
            --collect:"XPlat Code Coverage" \
            --results-directory TestResults \
            --logger "trx;LogFileName=testresults.trx" \
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura
          
          echo "✅ Testes executados com sucesso!"

      - name: 🔍 Find Coverage Files
        run: |
          echo "🔎 Procurando arquivos de cobertura..."
          COVERAGE_FILES=$(find . -name "coverage.cobertura.xml" -type f)
          
          if [ -z "$COVERAGE_FILES" ]; then
            echo "❌ ERRO CRÍTICO: Nenhum arquivo de cobertura encontrado!"
            echo "📁 Estrutura de diretórios:"
            find . -name "*coverage*" -type d
            exit 1
          fi
          
          echo "📄 Arquivos de cobertura encontrados:"
          echo "$COVERAGE_FILES"
          echo "📊 Total de arquivos: $(echo "$COVERAGE_FILES" | wc -l)"

      - name: 🔄 Merge Coverage Reports
        run: |
          echo "🔄 Consolidando relatórios de cobertura..."
          mkdir -p coverage-report
          
          reportgenerator \
            -reports:"**/coverage.cobertura.xml" \
            -targetdir:"coverage-report" \
            -reporttypes:"Cobertura" \
            -verbosity:Info
          
          echo "📁 Conteúdo do coverage-report:"
          ls -la coverage-report/
          
          if [ -f "coverage-report/Cobertura.xml" ]; then
            echo "✏️ Renomeando Cobertura.xml para coverage.cobertura.xml"
            mv coverage-report/Cobertura.xml coverage-report/coverage.cobertura.xml
            echo "✅ Arquivo renomeado com sucesso!"
          else
            echo "❌ ERRO: Arquivo Cobertura.xml não encontrado!"
            exit 1
          fi

      - name: ✅ Verify Final Coverage File
        run: |
          echo "🔍 Verificando arquivo final de cobertura..."
          
          if [ ! -f "coverage-report/coverage.cobertura.xml" ]; then
            echo "❌ ERRO CRÍTICO: Arquivo coverage.cobertura.xml não encontrado!"
            echo "📁 Conteúdo do diretório:"
            ls -la coverage-report/
            exit 1
          fi
          
          FILE_SIZE=$(wc -c < "coverage-report/coverage.cobertura.xml")
          FILE_LINES=$(wc -l < "coverage-report/coverage.cobertura.xml")
          
          echo "📊 Estatísticas do arquivo:"
          echo "   Tamanho: $FILE_SIZE bytes"
          echo "   Linhas: $FILE_LINES"
          
          if [ "$FILE_SIZE" -lt 100 ]; then
            echo "⚠️  AVISO: Arquivo de cobertura muito pequeno, pode estar vazio"
          fi
          
          echo "✅ Arquivo de cobertura verificado com sucesso!"

      - name: 🏁 End SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          echo "🏁 Finalizando análise do SonarCloud..."
          dotnet-sonarscanner end
          echo "✅ Análise do SonarCloud finalizada com sucesso!"

      - name: 📊 Publish Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: TestResults/**

      - name: 📊 Publish Coverage Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage-report/
          
      - name: 🎉 Success Notification
        if: success()
        run: |
          echo "🎉 PIPELINE EXECUTADO COM SUCESSO!"
          echo "📈 Cobertura de código enviada para o SonarCloud"
          echo "🔗 Verifique o dashboard: https://sonarcloud.io"

      - name: ⚠️ Failure Notification
        if: failure()
        run: |
          echo "❌ PIPELINE FALHOU!"
          echo "🔍 Verifique os logs acima para identificar o problema"
          echo "📋 Possíveis causas:"
          echo "   - Arquivo de cobertura não gerado"
          echo "   - Problemas de conexão com SonarCloud"
          echo "   - Falha nos testes"