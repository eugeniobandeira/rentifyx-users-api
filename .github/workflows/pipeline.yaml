name: Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build-test-sonar:
    runs-on: ubuntu-latest
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ⚙️ Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: 📦 Install SonarScanner for .NET
        run: dotnet tool install --global dotnet-sonarscanner

      - name: 📦 Install dependencies
        run: dotnet restore

      - name: 🕵️‍♂️ Begin SonarCloud analysis 
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet-sonarscanner begin \
            /k:"${{ secrets.SONAR_PROJECT_KEY }}" \
            /o:"${{ secrets.SONAR_ORGANIZATION }}" \
            /d:sonar.cs.vscoveragexml.reportsPaths="**/coverage.cobertura.xml" \
            /d:sonar.coverage.exclusions="**Tests*.cs,**/obj/**" \
            /d:sonar.verbose=true

      - name: 🛠 Build
        run: dotnet build --no-restore --configuration Release

      - name: ✅ Run Tests with Coverage
        run: |
          echo "🧪 Executando testes com cobertura..."
          mkdir -p TestResults
          
          find . -name "coverage.cobertura.xml" -delete
          
          dotnet test \
            --configuration Release \
            --collect:"XPlat Code Coverage" \
            --results-directory TestResults \
            --logger "trx;LogFileName=testresults.trx" \
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura

      - name: 🔍 Verify Coverage Files
        run: |
          echo "🔍 Verificando arquivos de cobertura gerados..."
          COVERAGE_FILES=$(find . -name "coverage.cobertura.xml" -type f)
          
          if [ -z "$COVERAGE_FILES" ]; then
            echo "❌ Nenhum arquivo de cobertura encontrado!"
            exit 1
          fi
          
          echo "📄 Arquivos encontrados:"
          echo "$COVERAGE_FILES"
          
          echo "📋 Verificando formato dos arquivos..."
          for file in $COVERAGE_FILES; do
            echo "--- $file (primeiras 5 linhas) ---"
            head -5 "$file"
            echo ""
          done

      - name: 🏁 End SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          echo "🏁 Finalizando análise SonarCloud..."
          dotnet-sonarscanner end

      - name: 📊 Upload Coverage Files for Debug
        uses: actions/upload-artifact@v4
        with:
          name: coverage-files
          path: |
            **/coverage.cobertura.xml
          retention-days: 7