name: Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build-test-sonar:
    runs-on: ubuntu-latest
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ⚙️ Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: 📦 Install SonarScanner for .NET
        run: dotnet tool install --global dotnet-sonarscanner

      - name: 📦 Install dependencies
        run: dotnet restore

      - name: 🕵️‍♂️ Begin SonarCloud analysis 
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet-sonarscanner begin \
            /k:"${{ secrets.SONAR_PROJECT_KEY }}" \
            /o:"${{ secrets.SONAR_ORGANIZATION }}" \
            /d:sonar.cs.vscoveragexml.reportsPaths="**/coverage.cobertura.xml" \
            /d:sonar.coverage.exclusions="**Tests*.cs,**/obj/**" \
            /d:sonar.verbose=true

      - name: 🛠 Build
        run: dotnet build --no-restore --configuration Release

      - name: ✅ Run Tests with Coverage (FIXED)
        run: |
          echo "🧪 Running tests with coverage..."
          rm -rf TestResults
          
          dotnet test \
            --configuration Release \
            --no-build \
            --logger "trx;LogFileName=testresults.trx" \
            --collect:"XPlat Code Coverage" \
            --results-directory TestResults \
            --settings coverlet.runsettings

      - name: 🔍 Verify Coverage Files
        run: |
          echo "🔍 Checking generated coverage files..."
          COVERAGE_FILES=$(find . -name "*.cobertura.xml" -type f)
          
          if [ -z "$COVERAGE_FILES" ]; then
            echo "❌ No coverage files found!"
            exit 1
          fi
          
          echo "📄 Files found:"
          echo "$COVERAGE_FILES"
          
          echo "📋 Checking file format..."
          for file in $COVERAGE_FILES; do
            echo "--- $file (first 5 lines) ---"
            head -5 "$file"
            echo ""
          done

      - name: 🛠️ CONVERT COVERAGE FORMAT (SOLUÇÃO DEFINITIVA)
        run: |
          echo "🛠️ Converting coverage format from Cobertura to Visual Studio..."
          
          COVERAGE_FILES=$(find . -name "coverage.cobertura.xml" -type f)
          
          for file in $COVERAGE_FILES; do
            echo "📝 Converting: $file"
            
            if [ ! -s "$file" ]; then
              echo "⚠️  File is empty, skipping: $file"
              continue
            fi
            
            temp_file="${file}.converted"
            
            sed 's/^<coverage\s*/<results /; s/^<\/coverage>/<\/results>/' "$file" > "$temp_file"
            
            if grep -q "<results" "$temp_file"; then
              mv "$temp_file" "$file"
              echo "✅ Successfully converted: $file"
            else
              echo "❌ Failed to convert: $file"
              rm -f "$temp_file"
            fi
          done
          
          echo "🔍 Verifying conversion..."
          for file in $COVERAGE_FILES; do
            echo "--- $file (first 3 lines after conversion) ---"
            head -3 "$file"
            echo ""
          done

      - name: 🏁 End SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          echo "🏁 Finalizing SonarCloud analysis..."
          dotnet-sonarscanner end

      - name: 📊 Upload Coverage Files for Debug
        uses: actions/upload-artifact@v4
        with:
          name: coverage-files
          path: |
            **/*.cobertura.xml
          retention-days: 7